#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import logging
import re
from typing import List, Set, Optional, cast
from pathlib import Path

from sensibility.language import language
from sensibility.miner.util import filehashes
from sensibility.model.lstm import ModelDescription, layers
from sensibility._paths import (
    get_validation_set_path, get_training_set_path, get_vectors_path
)


# Based on findings by Bhatia and Singh 2016
HIDDEN_LAYERS = (128,)
CONTEXT_LENGTH = 9

# This is arbitrary, but it should be fairly small.
BATCH_SIZE = 64

# Match these names
name_pattern = re.compile(r"""
    ^
    (?P<language>\w+)
    -
    (?P<direction>[fb])
    (?P<partition>\d+)
    [.]hdf5
    $
""", re.VERBOSE)


def infer_args(args: argparse.Namespace) -> argparse.Namespace:
    """
    >>> args = infer_args(parser.parse_args(['-o', 'lstms/python-b2.hdf5']))
    >>> from sensibility.language import language
    >>> language.id
    'python'
    >>> args.backwards
    True
    >>> args.partition
    2
    >>> str(args.base_dir)
    'lstms'
    """
    path: Optional[Path] = args.output
    if not path:
        return args
    match = name_pattern.match(path.name)
    if not match:
        raise ValueError(f"cannot infer params from: {path}")

    language_id = match.groupdict()['language']
    language.set_language(language_id)  # type: ignore
    backwards = match.groupdict()['direction'] == 'b'
    setattr(args, 'backwards', backwards)
    partition = int(match.groupdict()['partition'])
    setattr(args, 'partition', partition)
    setattr(args, 'base_dir', path.parent)
    return args


# Create the argument parser.
# TODO: infer from language.
parser = argparse.ArgumentParser(description='Train from corpus '
                                 'of vectors, with fold assignments')
parser.add_argument('-i', '--partition', type=int, help='which partition this is')
group = parser.add_mutually_exclusive_group()
group.add_argument('--backwards', action='store_true', default=False)
group.add_argument('--forwards', action='store_false', dest='backwards')
parser.add_argument('--hidden-layers', type=layers, default=HIDDEN_LAYERS,
                    help=f"default: {HIDDEN_LAYERS}")
parser.add_argument('--context-length', type=int, default=CONTEXT_LENGTH,
                    help=f"default: {CONTEXT_LENGTH}")
parser.add_argument('--train-set-size', type=int,
                    default=11_000, help='Number of files to train on')
parser.add_argument('--validation-set-size', type=int,
                    default=5500, help='Number of files to validate against')
parser.add_argument('--batch-size', type=int, default=BATCH_SIZE,
                    help=f"default: {BATCH_SIZE}")
parser.add_argument('--base-dir', type=Path, default=Path('.'),
                    help=f"default: .")
parser.add_argument('--output', '-o', type=Path,
                    help=f"Where to output.  Infers the rest of the arguments from this one")
parser.add_argument('--gpu', type=int, default=None,
                    help=f"Which GPU to use.")


def slurp(filename: Path) -> List[str]:
    with open(filename, 'r') as hashes_file:
        return list(filehashes(hashes_file))


def subset(xs: List[str], max_size: int) -> Set[str]:
    return set(xs[:max_size])


# TODO: Support multiple models?
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    args = infer_args(parser.parse_args())

    if args.partition is None:
        parser.error('Require --partitions or --output')

    partition = cast(int, args.partition)

    training_set = slurp(get_training_set_path(partition))
    validation_set = slurp(get_validation_set_path(partition))

    # Use the provided GPU.
    if args.gpu is not None:
        import os
        os.environ['CUDA_VISIBLE_DEVICES'] = str(args.gpu)

    # Determine language first!
    model = ModelDescription(
        partition=partition,
        training_set=subset(training_set, args.train_set_size),
        validation_set=subset(validation_set, args.validation_set_size),
        backwards=args.backwards,
        base_dir=args.base_dir,
        batch_size=args.batch_size,
        context_length=args.context_length,
        hidden_layers=args.hidden_layers,
        vectors_path=get_vectors_path(),
        learning_rate=0.1
    )

    model.train()
