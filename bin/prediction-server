#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Loads models in a server that can be loaded once, and consulted in a different
process.

Usage:
    prediction-server <model-dir>
"""

import argparse
from xmlrpc.server import SimpleXMLRPCServer  # type: ignore
from xmlrpc.client import Binary  # type: ignore
from pathlib import Path

from sensibility.model.lstm import KerasDualLSTMModel
from sensibility.source_vector import SourceVector
from sensibility.utils import Timer

parser = argparse.ArgumentParser()
parser.add_argument('model_dir',  type=Path, default=None,
                    help='a directory containing forwards.hdf5 and backwards.hdf5')
parser.add_argument('-P', '--port', type=int, default=8080,
                    help='port to bind to on localhost')


if __name__ == '__main__':
    args = parser.parse_args()

    print("Loading models. This may take a while... üçµ")
    with Timer() as timer:
        model = KerasDualLSTMModel.from_directory(args.model_dir)
    print(f"Loaded models in {timer.seconds:2.1f} seconds")

    def predict_file(vector: Binary):
        """
        Does predictions for an entire file; the result
        from the server will be a list of tuples, themselves being tuples.
        """
        vector = SourceVector.from_bytes(vector.data)
        token_results = model.predict_file(vector)

        def tupleize():
            for fw, bw in token_results:
                yield tuple(float(x) for x in fw), tuple(float(x) for x in bw)
        return list(tupleize())

    # Only bind to localhost; making this service external is a bad idea.
    addr = 'localhost', args.port
    with SimpleXMLRPCServer(addr) as server:
        server.register_function(predict_file)
        print("Server listening on", ':'.join(str(c) for c in addr))
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            print("\nShutting down.")
            exit(0)
