#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Queries a remote model (see: prediction-server).

Usage:
    query source.ext [...]
    query < source.ext

"""

import sys
import argparse
from pprint import pprint

from sensibility import current_language
from sensibility.fix import LSTMFixerUpper
from sensibility.model.lstm.remote import RemoteDualLSTMModel
from sensibility.source_vector import to_source_vector


parser = argparse.ArgumentParser()
parser.add_argument('file', type=lambda n: open(n, "rb"),
                    default=sys.stdin.buffer)
parser.add_argument('--list-tokens', action='store_true')
args = parser.parse_args()


model = RemoteDualLSTMModel.connect()
current_language.set(model.language_name)
fixer = LSTMFixerUpper(model)

# Slurp the source file.
with args.file:
    source_bytes = args.file.read()

if args.list_tokens:
    vector = to_source_vector(source_bytes, oov_to_unk=True)

    # Get tokenwise-results
    results = model.predict_file(vector)

    for token, (fw, bw) in zip(vector, results):
        print(f"{token:3d}  {fw.argmax():3d}  {bw.argmax():3d}")

pprint(fixer.fix(source_bytes))
