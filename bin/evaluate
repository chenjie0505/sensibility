#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Evaluate the Java models.
"""

# TODO: check sensibility.current_language instead of hard-coding this for Java.

import argparse
import re
import shutil
import sys
import tempfile
from pathlib import Path

from unnaturalcode.validation.languages.java import JavaValidationMain  # type: ignore


parser = argparse.ArgumentParser()
parser.add_argument('-o', '--out', type=Path,
                    help='Filename of the resultant database')
parser.add_argument('--fix', choices=('dual', 'left', 'right'),
                    help='The strategy for fixing')
parser.add_argument('--mistakes-list', type=Path)
parser.add_argument('-n', '--mistakes', type=int,
                    help='Maximum number of mistakes to evaluate on')
parser.add_argument('--models', type=Path, required=True,
                    help='Common prefix the path to forwards/backwards models')
args = parser.parse_args()


if args.fix != 'dual':
    raise NotImplementedError("I didn't get around to that yet.")


def validation_loss(filename: Path) -> float:
    """
    >>> validation_loss(Path('models/intermediate-2.1664-00.hdf5'))
    2.1664
    """
    pat = re.compile(r'intermediate-(\d+\.\d+)-')
    return float(pat.match(filename.stem).group(1))


def path_to_best_model(model_dir: Path) -> Path:
    """
    Given a directory, returns the path to the model with the lowest
    validation loss.
    """
    assert model_dir.is_dir()
    models = list(model_dir.glob('intermediate-*.hdf5'))
    return min(models, key=validation_loss)


# UnnaturalCode wants a directory to read models from, and to dump results
# into. Create a temporary directory, evaluate, then copy the results back.
with tempfile.TemporaryDirectory() as result_dir_name:
    result_dir = Path(result_dir_name)

    # Setup the symlinks to the best models.
    forwards_model = path_to_best_model(args.models.with_suffix('.forwards'))
    backwards_model = path_to_best_model(args.models.with_suffix('.backwards'))
    (result_dir / 'forwards.hdf5').symlink_to(forwards_model)
    (result_dir / 'backwards.hdf5').symlink_to(backwards_model)

    # Invoke UnnaturalCode
    # XXX: Override sys.argv so that JavaValidation's main works
    sys.argv = [
        # argv[0]: pretend this is the script's name.
        'unnaturalcode-evaluation',

        '--tool', 'sensibility',
        '--discard-identifiers',
        '--keep-corpus',
        '--mutation', 'null',
        '--pair-file-limit', str(args.mistakes),
        '--pair-file-list', str(args.mistake_path),
        '--output-dir', str(result_dir)
    ]

    JavaValidationMain().main()

    # Copy the results to the name given on the command line.
    results = result_dir / 'results.sqlite3'
    assert results.exists()
    shutil.copy(str(results), str(args.out))
