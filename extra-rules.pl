#!/usr/bin/env perl

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;

my $partitions = 5;  # Note: partitions are zero-indexed.
my $max_partition = $partitions - 1;
my @languages = qw{java javascript python};

print "# Autogenerated file: do not modify!\n";

# Create declare the phony rules.

sub model_filename {
    my ($language, $direction, $part) = @_;
    return "evaluation/$language/models/$language-$direction$part.hdf5";
}

sub phony_rule {
    my $language = shift;
    my $phony_target = "$language-models";
    print ".PHONY: $phony_target\n";
    print "$phony_target:";
    foreach my $part (0 .. $max_partition) {
        foreach my $dir ('f', 'b') {
            print " @{[model_filename $language, $dir, $part]}"
        }
    }
    print "\n";
}

sub model_rules {
    my $language = shift;
    foreach my $direction ('forwards', 'backwards') {
        my $dir = substr $direction, 0, 1;
        foreach my $part (0 .. $max_partition) {
            my $filename = model_filename $language, $dir, $part;
            print "$filename:\n";
            print "\tenv train -o $filename ";
            print "--train-set-size=\$(TRAIN_SET_SIZE) ";
            print "--validation-set-size=\$(VALIDATION_SET_SIZE) ";
            print "--hidden-layers=\$(HIDDEN_LAYERS) ";
            print "--context-length=\$(CONTEXT)\n";
        }
    }
}

sub big_phony_rule {
    print "PHONY: models\n";
    print "models:";
    for my $language (@languages) {
        print " $language-models";
    }
    print "\n"
}

# Create a phony rule for models.
# Create rules for the trained models
for my $language (@languages) {
    phony_rule $language;
    model_rules $language;
    print "\n";
}
big_phony_rule;

###
print "\n";
###
