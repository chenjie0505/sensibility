#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Two concetps:

one is the MATRIX of different configurations,

the other is the command line. Our goal is to create all the commands for the
matrix.

The build matrix is the cartesian product of everything, and it provides a
namespace to the commands
"""

import io
from contextlib import redirect_stdout
from itertools import product
from typing import Set, List, Dict, Any, NamedTuple
from pprint import pprint


class Matrix:
    def __init__(self) -> None:
        self.options: Dict[str, Set[Any]] = {}

    def add(self, name: str, *values: Any) -> None:
        self.options[name] = set(values)

    def generate_all(self):
        names = list(self.options.keys())
        for prod in product(*(self.options[opt] for opt in names)):
            yield dict(zip(names, prod))


configurations = Matrix()


# All the available languages.
languages = {'java', 'javascript', 'python'}

configurations.add('layers', '300', '100', '100,100')
configurations.add('learning_rate', '0.001')
configurations.add('batch_size', 32)
configurations.add('context', '20', '10', '5')


class Command:
    def __init__(self, bin: str, *args: str, **kwargs) -> None:
        self.bin = bin

        def generate_kwargs():
            for option, value in kwargs.items():
                if len(option) == 1:
                    yield '-' + option
                else:
                    yield '--' + option.replace('_', '-')
                yield value
        self.arguments = args + tuple(generate_kwargs())

    def __str__(self) -> str:
        return ' '.join((self.bin,) + self.arguments)


class MakeRecipe(NamedTuple):
    targets: List[str]
    sources: List[str]
    commands: List[Command]

    def __str__(self) -> str:
        f = io.StringIO()
        with redirect_stdout(f):
            print(*self.targets, sep=' ', end=': ')
            print(*self.sources, sep=' ', end='\n')
            for command in self.commands:
                print('\t', command, sep='', end='\n')
        return f.getvalue()


# Okay, so the training command should produce a DIRECTORY.
# The directory should contain a manifest indicating ALL of parameters.
# The there should be a sentinel flag inside that indicates that the job is complete.
command = Command('train',
                  o='this-should-be-a-directory',
                  context_size='300',
                  learning_rate='0.001',
                  batch_size='32')
recipe = MakeRecipe(targets=['models/configuration'],
                    sources=[],
                    commands=[command])

print(recipe)
pprint(list(configurations.generate_all()))
