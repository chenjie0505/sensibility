#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Creates the cartesian product of all configurations.

Usage:

Include the generated Make rules in to your main Makefile.

    include experiments.mk

Create a rule in your Makefile that generates the appropriate file:

    experiments.mk: libexec/experiments
            $< > $@

Then you can run ALL of the experiments by issuing the command:

    make experiments

Recommended:

When running `make`:
 - Add the --jobs argument (-j) alongside the --keep-running option (-k).
 - Add --output-sync=line (-Oline) to buffer lines of parallel output.
 - Tweak --jobs=N to the largest N that will efficiently run on the machine.
"""

from makefile import Makefile
from configurations import Configurations
from experiment import Experiment


with Makefile() as make:
    SMALL_SET_SIZE = 32
    MEDIUM_SET_SIZE = 512

    # === Small, exploratory configurations === #
    Experiment(name='small',
               language='java',
               training_configs=Configurations(
                   hidden_layers={'50', '100', '200', '300', '400', '1000'},
                   context_length={5, 10, 15, 20},
                   batch_size={32},
                   learning_rate={'0.001'},
                   patience={10, 20},
                   dropout={0.75, None},
                   optimizer={'adam', 'rmsprop'},
                   train_set_size={SMALL_SET_SIZE},
                   validation_set_size={SMALL_SET_SIZE},
                   partition={0, 1, 2, 3, 4},
               ),
               eval_configs=Configurations(
                   fix={'dual'},  # TODO: {'dual', 'left', 'right'},
                   mistakes={SMALL_SET_SIZE},
               )).add_to_makefile(make)

    # After the grid search, these are the configurations found that are worth
    # further investigating.

    # === Medium configurations === #
    Experiment(name='medium',
               language='java',
               training_configs=Configurations(
                   # The first ranking configuration
                   hidden_layers={200},
                   context_length={5},
                   batch_size={32},
                   learning_rate={'0.001'},
                   patience={20},
                   dropout={None},
                   optimizer={'adam'},
                   train_set_size={MEDIUM_SET_SIZE},
                   validation_set_size={MEDIUM_SET_SIZE // 2},
                   partition={0, 1, 2, 3, 4},
               ) + Configurations(
                   # The second ranking configuration
                   hidden_layers={50},
                   context_length={20},
                   batch_size={32},
                   learning_rate={'0.001'},
                   patience={10},
                   dropout={None},
                   optimizer={'adam'},
                   train_set_size={MEDIUM_SET_SIZE},
                   validation_set_size={MEDIUM_SET_SIZE // 2},
                   partition={0, 1, 2, 3, 4},
               ) + Configurations(
                   # The original configuration (which was sixth overall)
                   hidden_layers={300},
                   context_length={20},
                   batch_size={32},
                   learning_rate={'0.001'},
                   patience={20},
                   dropout={None},
                   optimizer={'adam'},
                   train_set_size={MEDIUM_SET_SIZE},
                   validation_set_size={MEDIUM_SET_SIZE // 2},
                   partition={0, 1, 2, 3, 4},
               ),
               eval_configs=Configurations(
                   fix={'dual'},
                   mistakes={MEDIUM_SET_SIZE},
               )).add_to_makefile(make)

    # Rule to make ALL of the experiments.
    make.phony_rule('experiments').depends_on(
        'small-experiments',
        'medium-experiments'
    )
