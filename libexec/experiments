#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright 2017 Eddie Antonio Santos <easantos@ualberta.ca>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Two concetps:

one is the MATRIX of different configurations,

the other is the command line. Our goal is to create all the commands for the
matrix.

The build matrix is the cartesian product of everything, and it provides a
namespace to the commands
"""

from pathlib import Path

from makefile import Command, Rule
from configurations import Configurations


base_dir = Path('.')

# All the available languages.
languages = {'java', 'javascript', 'python'}

model_configs = Configurations(
    layers={'300', '100', '100,100'},
    learning_rate={'0.001'},
    batch_size={32},
    context={'20', '10', '5'},
    partition={0}  # {0, 1, 2, 3, 4}
)

eval_configs = Configurations(
    fix={'double', 'left', 'right'}
)

print("# THIS IS AN AUTOGENERATED FILE. ")
print("# DO NOT MODIFY.")

# The training command.
train = Command('sensibility', 'train-lstm')
# The evaluation command.
evaluate = Command('sensibility', 'evaluate')

models = []
results = []

# - the training command should produce a **directory**.
# - The directory should contain a manifest (in pretty-printed JSON?) indicating
#   ALL of parameters.
# - There should be a sentinel flag inside that indicates that the job is complete.
# - Creates the directory with suffix .incomplete, then moves it to the real
#   name.

# Create rules for the training models.
for config in model_configs:
    model_file = config.basename
    Rule.creates(model_file).set_recipe(
        train(output_dir='$@', forwards=True, **config),
        train(output_dir='$@', backwards=True, **config)
    ).print()
    models.append(model_file)

# Creates rules for evaluating models.
for config in eval_configs:
    for model in models:
        eval_file = (
            (base_dir / config.basename.stem / model).with_suffix('.sqlite3')
        )
        Rule.creates(eval_file).depends_on(model).set_recipe(
            evaluate(i='$<', o='$@', **config)
        ).print()
        results.append(eval_file)


Rule.create_phony('experiments').depends_on(*results).print()
